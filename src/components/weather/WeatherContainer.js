import { useState, useEffect, useReducer } from "react";
import TripleToggle from "./TripleToggle";
const initialState = {
  weather: {},
  errors: [],
  weatherObtained: false,
};
function reducer(state, action) {
  switch (action.type) {
    default:
      return { ...state };
    case "USE_CELSIUS":
      return { ...state };
    // case "USE_"
    case "GET_WEATHER":
      return { ...state };
    case "SET_WEATHER":
      return { ...state, weather: action.payload, weatherObtained: true };
    case "SET_ERRORS":
      return { ...state, errors: [...state.errors, [action.errors]] };
  }
}
const WeatherContainer = ({ props: { latitude, longitude } }) => {
  const weatherDictionary = new Map([
    ["01d", "üåû"],
    ["02d", "‚õÖ"],
    ["03d", "‚òÄÔ∏è ‚òÅÔ∏è ‚òÅÔ∏è"],
    ["04d", "‚òÅÔ∏è‚òÄÔ∏è‚òÅÔ∏è"],
    ["01n", "üåëüåÉ"],
    ["02n", "‚õÖ"],
    ["03n", "üåë ‚òÅÔ∏è ‚òÅÔ∏è"],
    ["04n", "‚òÅÔ∏èüåë‚òÅÔ∏è"],
    // ['901', '‚òÑÔ∏è'], comet / meteor
    ["900", "üåä"], // water wave
    ["802", "üåÄ"], // hurricane
    ["801", "‚òÅÔ∏è‚òÄÔ∏è‚òÅÔ∏è"],
    ["802", "‚òÅÔ∏èüå§Ô∏è‚òÅÔ∏è"],
    ["803", "‚òÅÔ∏è‚õÖ‚òÅÔ∏è"],
    ["804", "‚òÅÔ∏èüå•Ô∏è‚òÅÔ∏è"],
    ["800", "üåû"],
    ["701", ""],
    ["711", ""],
    ["721", ""],
    ["731", ""],
    ["741", "üå´Ô∏è"],
    ["751", ""],
    ["761", ""],
    ["762", "üåã"],
    ["771", "üå¨Ô∏è"],
    ["781", "üå™Ô∏è"],
    ["600", "üå®Ô∏è"],
    ["601", "üå®Ô∏èüå®Ô∏è"],
    ["602", "üå®Ô∏èüå®Ô∏èüå®Ô∏è"],
    ["611", "üå®Ô∏èüåßÔ∏è"],
    ["612", "üå®Ô∏èüåßÔ∏èüå®Ô∏è"],
    ["613", "üå®Ô∏èüå®Ô∏èüåßÔ∏èüå®Ô∏èüå®Ô∏è"],
    ["615", "üå®Ô∏èüå®Ô∏èüå®Ô∏èüåßÔ∏èüå®Ô∏èüå®Ô∏èüå®Ô∏è"],
    ["616", "üå®Ô∏èüåßÔ∏è"],
    ["620", "üå®Ô∏èüå®Ô∏è"],
    ["621", "üå®Ô∏èüå®Ô∏èüå®Ô∏è"],
    ["622", "üå®Ô∏èüå®Ô∏èüå®Ô∏èüå®Ô∏è"],
    ["500", "üå¶Ô∏è"],
    ["501", "‚òîüåßÔ∏èüå¶Ô∏èüåßÔ∏è"],
    ["502", "‚òîüåßÔ∏èüåßÔ∏èüå¶Ô∏èüåßÔ∏èüåßÔ∏è"],
    ["503", "‚òîüåßÔ∏èüåßÔ∏èüåßÔ∏èüå¶Ô∏èüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
    ["504", "‚òîüåßÔ∏èüåßÔ∏èüåßÔ∏èüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
    ["511", "üå¶Ô∏èüåßÔ∏èüå®Ô∏è"],
    ["520", "üå¶Ô∏è"],
    ["521", "üåßÔ∏èüå¶Ô∏èüåßÔ∏è"],
    ["522", "üåßÔ∏èüåßÔ∏èüå¶Ô∏èüåßÔ∏èüåßÔ∏è"],
    ["531", "üåßÔ∏èüåßÔ∏èüåßÔ∏èüå¶Ô∏èüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
    ["300", "‚òîüåßÔ∏è"],
    ["301", "‚òîüåßÔ∏èüåßÔ∏è"],
    ["302", "‚òîüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
    ["310", "‚òîüåßÔ∏è"],
    ["311", "‚òîüåßÔ∏èüåßÔ∏è"],
    ["312", "‚òîüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
    ["313", "‚òîüåßÔ∏è"],
    ["314", "‚òîüåßÔ∏èüåßÔ∏è"],
    ["321", "‚òîüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
    ["200", "‚õàüå©Ô∏èüå©Ô∏èüåßÔ∏è"],
    ["201", "‚õàüå©Ô∏èüå©Ô∏èüåßÔ∏èüåßÔ∏è"],
    ["202", "üå©Ô∏èüå©Ô∏èüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
    ["210", "üå©Ô∏è"],
    ["211", "üå©Ô∏èüå©Ô∏è"],
    ["212", "üå©Ô∏èüå©Ô∏èüå©Ô∏è"],
    ["221", "üå©Ô∏èüå©Ô∏èüå©Ô∏èüå©Ô∏è"],
    ["230", "‚õà‚õà‚õàüå©Ô∏èüå©Ô∏èüåßÔ∏è"],
    ["231", "üå©Ô∏èüå©Ô∏èüåßÔ∏èüåßÔ∏è"],
    ["232", "üå©Ô∏èüå©Ô∏èüåßÔ∏èüåßÔ∏èüåßÔ∏è"],
  ]);

  const [state, dispatch] = useReducer(reducer, initialState);
  const { weatherObtained } = state;
  console.log(state);
  useEffect(() => {
    async function getWeather() {
      let WEATHER_API_KEY = "0d379932ab8f74b262973b9886276755";
      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}`;
      try {
        const {
          main: { temp, feels_like, temp_min, temp_max, pressure, humidity },
          sys: { sunrise, sunset },
          timezone,
          visibility,
          weather: [{ description, icon, id }],
          wind: { deg, speed },
          clouds: { all: cloudinessPercentage },
        } = await (await fetch(url)).json();
        return dispatch({
          type: "SET_WEATHER",
          payload: {
            temp: temp,
            visibility: visibility,
            feels_like: feels_like,
            temp_min: temp_min,
            temp_max: temp_max,
            pressure: pressure,
            humidity: humidity,
            sunrise: sunrise,
            sunset: sunset,
            timezone: timezone,
            description: description,
            icon: icon,
            deg: deg,
            id: id,
            speed: speed,
            cloudinessPercentage: cloudinessPercentage,
          },
        });
      } catch (error) {
        // "Unable to retrieve your location"
        // "Geolocation is not supported by your browser"
        dispatch({ type: "SET_ERRORS", errors: { ...error } });
      }
    }
    getWeather();
  }, []);
  let accesibleDictionary = new Map();
  console.log("üç∫ üõãÔ∏è");
  let { temp, feels_like, temp_min, temp_max, id } = state.weather;
  console.log(id);
  function convertTemperature() {}
  return !weatherObtained ? (
    <div>obtaining location....</div>
  ) : (
    <div>
      <h1>Weather Widget</h1>
      <TripleToggle
        props={{
          temp: temp,
          feels_like: feels_like,
          temp_min: temp_min,
          temp_max: temp_max,
        }}
      />
      <p alt="night time scattered clouds " style={{ fontSize: "100px" }}>
        {weatherDictionary.get(state.weather.id)}
        <i className="fas fa-cloud-moon"></i>
      </p>
      <p alt="night time scattered clouds " style={{ fontSize: "100px" }}>
        {weatherDictionary.get("803")}
        <i className="fas fa-cloud-moon"></i>
      </p>
    </div>
  );
};
export default WeatherContainer;
